//adding actions
// init will have pre and frnds in the same order
// select eats accordingly
//introduce(i, Y, P, Q, J)
//fake-create(x, i, Y, P, Q, J)

// add for all: assuming it is an act of environment and a new g is added


CAPABILITY = (( introduce_g_for__mfo__all_at = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND predator_f_m AND predator_o_m, POST = {at_g, predator_m_g, predator_f_g, predator_o_g} ),
2 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(o,{-(1,1),-(2,2)}),
(g,{-(1,1),-(2,2)})
}

//no commas please

SUMEDGES = {
(g,{-(1,1)})
}
,
DES = {1}}), 
_, c50),

CAPABILITY = (( introduce_g_for__mf__all_at = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND predator_o_m, POST = {at_g, predator_m_g, predator_f_g, predator_o_g} ),
2 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(o,{-(1,2),-(2,2)}),
(g,{-(1,1),-(2,2)})
}

//no commas please

SUMEDGES = {
(g,{-(1,1)})
}
,
DES = {1}}), 
_, c50),


// deceptive


CAPABILITY = (( fake-create_g_by_m_for__fo__all_at = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND predator_f_m AND predator_o_m, POST = {nil} ),
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND predator_f_m AND predator_o_m, POST = {at_g, predator_m_g, predator_f_g, predator_o_g} ),
3 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)})
}

//no commas please

SUMEDGES = {
(g,{-(2,2)})
}
,
DES = {1}}), 
m, c2),

CAPABILITY = (( fake-create_g_by_m_for__f__all_at = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND predator_o_m, POST = {nil} ),
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND predator_o_m, POST = {at_g, predator_m_g, predator_f_g, predator_o_g} ),
3 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,3),-(2,3),-(3,3)})
}

//no commas please

SUMEDGES = {
(g,{-(2,2)})
}
,
DES = {1}}), 
m, c2)
