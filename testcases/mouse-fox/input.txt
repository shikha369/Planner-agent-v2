PROPS : {at_m, at_g, at_f, at_o th_m, th_f, th_g, th_o, friends_m_g, friends_f_g, friends_m_f, friends_m_o, friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o} .

//replacing alive_i atoms with POSSIBLE [i] (TRUE) statements. 
//augmenting actions `add gruffalo` and `delete gruffalo` with differing observalibility conditions.
//g can be in the agent set but still non-existent in all the worlds?

AGENTS : {m, f, o}.

//initial model description starts here
//same's as Tiep's? Check initial?

//uncertainty about mouse being friends with the gruffalo in the initial model
MODEL : 
{ NODES = {
(1,{at_m, -at_g, at_f, -at_o, th_m, -th_f, -th_g, -th_o, -friends_m_g, -friends_f_g, -friends_m_f, -friends_m_o, -friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o}),
(2,{at_m, -at_g, at_f, -at_o, th_m, -th_f, -th_g, -th_o, friends_m_g, -friends_f_g, -friends_m_f, -friends_m_o, -friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o})
},  
EDGES = {
(m,{-(1,1), -(2,2)}),
(f,{-(1,1), -(2,2), -(2,1), -(1,2)}),
(o,{-(1,1), -(2,2), -(2,1), -(1,2)})
},
DES = {1}
}.

//action description starts here
//encoding the plausibility of having a gruffalo within the system

ACTIONS : {

CAPABILITY = (( flee_m = { 
EVENTS = { 
1 = ( PRE = (BELIEVES [m] (th_m)) AND at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
},
DES = {1}}), 
m, m_runs_away),

CAPABILITY = (( flee_f = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [f] (th_f)) AND at_f AND POSSIBLE [f] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, f_runs_away),

CAPABILITY = (( flee_g = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [g] (th_g)) AND at_g AND POSSIBLE [g] (TRUE), POST = {-at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, g_runs_away),

CAPABILITY = (( flee_o = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [o] (th_o)) AND at_o AND POSSIBLE [o] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, o_runs_away),

//arrives actions

CAPABILITY = (( m_arrives = { 

EVENTS = { 
1 = ( PRE = -at_m AND POSSIBLE [m] (TRUE), POST = {at_m} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
m, m_arrives),

CAPABILITY = (( f_arrives = { 

EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE), POST = {at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, f_arrives),

CAPABILITY = (( g_arrives = { 

EVENTS = { 
1 = ( PRE = -at_g AND POSSIBLE [g] (TRUE), POST = {at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, g_arrives),

CAPABILITY = (( o_arrives = { 

EVENTS = { 
1 = ( PRE = -at_o AND POSSIBLE [o] (TRUE), POST = {at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, o_arrives),


//leaves actions

CAPABILITY = (( m_leaves = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
m, m_leaves),

CAPABILITY = (( f_leaves = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, f_leaves),

CAPABILITY = (( g_leaves = { 

EVENTS = { 
1 = ( PRE = at_g AND POSSIBLE [g] (TRUE), POST = {-at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, g_leaves),

CAPABILITY = (( o_leaves = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, o_leaves),


//'eats' actions affect alive, will have DEL edges

CAPABILITY = (( g_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_g AND predator_g_m AND -friends_m_g AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE), POST = {-at_m})
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
g, g_eats_m),

CAPABILITY = (( g_eats_f = { 

EVENTS = { 
1 = ( PRE = at_f AND at_g AND predator_g_f AND -friends_f_g AND POSSIBLE [f] (TRUE) AND POSSIBLE [g] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(f,{-(1,1)})
}
,

DES = {1}}), 
g, g_eats_f),

CAPABILITY = (( g_eats_o = { 

EVENTS = { 
1 = ( PRE = at_o AND at_g AND predator_g_o AND -friends_o_g AND POSSIBLE [o] (TRUE) AND POSSIBLE [g] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(o,{-(1,1)})
}
,

DES = {1}}), 
g, g_eats_o),


CAPABILITY = (( f_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_f AND predator_f_m AND -friends_m_f AND POSSIBLE [f] (TRUE) AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
f, f_eats_m),

CAPABILITY = (( o_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_o AND predator_o_m AND -friends_m_o AND POSSIBLE [o] (TRUE) AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
o, o_eats_m),

//adding actions

// add for all: assuming it is an act of environment and a new g is added

CAPABILITY = (( add_g = { 

EVENTS = { 
1 = ( PRE = TRUE , POST = {at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

//no commas please

SUMEDGES = {
(g,{-(1,1)})
}
,
DES = {1}}), 
environment, test),

// add for somebody
//mfo, mf, mo

CAPABILITY = (( introduce_g_for_mfo = { 

EVENTS = { 
1 = ( PRE = POSSIBLE [g] (TRUE) AND POSSIBLE [m] (TRUE) AND POSSIBLE [f] (TRUE) AND at_f AND POSSIBLE [o] (TRUE) AND at_o, POST = {atg} ),
2 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(o,{-(1,1),-(2,2)}),
(g,{-(1,1),-(2,2)})
}

//no commas please

SUMEDGES = {
(g,{-(1,1)})
}
,
DES = {1}}), 
m, m_brings_g_to_fo),

CAPABILITY = (( introduce_g_for_mf = { 

EVENTS = { 
1 = ( PRE = POSSIBLE [g] (TRUE) AND POSSIBLE [m] (TRUE) AND POSSIBLE [f] (TRUE) AND at_f, POST = {atg} ),
2 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(o,{-(1,2),-(2,2)}),
(g,{-(1,1),-(2,2)})
}

//no commas please

SUMEDGES = {
(g,{-(1,1)})
}
,
DES = {1}}), 
m, m_brings_g_to_f),

CAPABILITY = (( introduce_g_for_mo = { 

EVENTS = { 
1 = ( PRE = POSSIBLE [g] (TRUE) AND POSSIBLE [m] (TRUE) AND POSSIBLE [o] (TRUE) AND at_o, POST = {atg} ),
2 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2)}),
(o,{-(1,1),-(2,2)}),
(f,{-(1,2),-(2,2)}),
(g,{-(1,1),-(2,2)})
}

//no commas please

SUMEDGES = {
(g,{-(1,1)})
}
,
DES = {1}}), 
m, m_brings_g_to_o),


// <todo> deceptively add for somebody
// fo, f, o

CAPABILITY = (( dcv_add_g_by_m_for_fo = { 

EVENTS = { 
1 = ( PRE = POSSIBLE [m] (TRUE) AND at_m AND POSSIBLE [f] (TRUE) AND at_f AND POSSIBLE [o] (TRUE) AND at_o , POST = {nil} ),  
2 = ( PRE = POSSIBLE [m] (TRUE) AND at_m AND POSSIBLE [f] (TRUE) AND at_f AND POSSIBLE [o] (TRUE) AND at_o , POST = {at_g} ),
3 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)})
}

//no commas please

SUMEDGES = {
(g,{-(2,2)})
}
,
DES = {1}}), 
m, test),

CAPABILITY = (( dcv_add_g_by_m_for_f = { 

EVENTS = { 
1 = ( PRE = POSSIBLE [m] (TRUE) AND at_m AND POSSIBLE [f] (TRUE) AND at_f , POST = {nil} ),  
2 = ( PRE = POSSIBLE [m] (TRUE) AND at_m AND POSSIBLE [f] (TRUE) AND at_f  , POST = {at_g} ),
3 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,3),-(2,3),-(3,3)})
}

//no commas please

SUMEDGES = {
(g,{-(2,2)})
}
,
DES = {1}}), 
m, test),

CAPABILITY = (( dcv_add_g_by_m_for_o = { 

EVENTS = { 
1 = ( PRE = POSSIBLE [m] (TRUE) AND at_m AND POSSIBLE [o] (TRUE) AND at_o , POST = {nil} ),  
2 = ( PRE = POSSIBLE [m] (TRUE) AND at_m AND POSSIBLE [o] (TRUE) AND at_o  , POST = {at_g} ),
3 = ( PRE = TRUE, POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(f,{-(1,3),-(2,3),-(3,3)})
}

//no commas please

SUMEDGES = {
(g,{-(2,2)})
}
,
DES = {1}}), 
m, test),


//CAPABILITY = (( infer_th_g = { 
//EVENTS = { 
//1 = ( PRE = at_g AND POSSIBLE [g] (TRUE) AND predator_?_g AND -friends_?_g, POST = {th_g} ),
//2 = ( PRE = NOT(at_g AND POSSIBLE [g] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND predator_?_g AND -friends_?_g), POST = {-th_g} )
//},
//EDGES = {
//(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
//(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
//(g,{-(1,1), -(1,2), -(2,1), -(2,2)})
//}
//,
//DES = {1,2}}), 
//Test, infer_th_g),
//announcement actions
//Type 1: Truth-telling that phi (ex. at_g, single point all observe). The precondition is that this event is applicable only when phi is actually true
//in the concerned world and the speaker believes that phi is true. The consequence is that everybody else perceive only this event to be happening 
//and as a consequence all other agents retain access to only this world. Speaker is cautious and the pre should also say that it believes that other does not believe in the contradiction? Should I use manipulative update here? Or assuming that the audience is credulous, should I correct beliefs of the agents.
//Type 2: Lying that phi (ex. If not at_g then deceiver as well as g knows that g is not around and deceived thinks at_g- two points)
//Type 3: Bluffing that phi (two points- nothing changes for the bluffed as well as g but the bluffed thinks at_g)
//For observability the agents are either fully observant (X) or oblivious (O). Whenever the facts concerns the respective agent, the agent can 
//distinguish one event from another 

//assuming all information related to g is known by g

CAPABILITY = (( m_truth_ann_at_g_to_gfo = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND BELIEVES [m] (at_g AND (NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [g] (-at_g) AND NOT POSSIBLE [o] (-at_g)) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(g,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, m_truth_ann_at_g_to_gfo),

CAPABILITY = (( m_truth_ann_at_g_to_gf_o_oblivious = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (at_g AND (NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [g] (-at_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(f,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(o,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, m_truth_ann_at_g_to_gf_o_oblivious),

CAPABILITY = (( m_truth_ann_at_g_to_go_f_oblivious = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (at_g AND (NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [g] (-at_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(o,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(f,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, m_truth_ann_at_g_to_go_f_oblivious),

CAPABILITY = (( m_truth_ann_friends_mg_to_gfo = { 

EVENTS = { 
1 = ( PRE = friends_m_g AND at_m AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND BELIEVES [m] (friends_m_g AND (NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [g] (-friends_m_g) AND NOT POSSIBLE [o] (-friends_m_g)) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(g,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, m_truth_ann_friends_mg_to_gfo),

CAPABILITY = (( m_truth_ann_friends_mg_to_gf_o_oblivious = { 

EVENTS = { 
1 = ( PRE = friends_m_g AND at_m AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (friends_m_g AND (NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [g] (-friends_m_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(f,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(o,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, m_truth_ann_friends_mg_to_gf_o_oblivious),

CAPABILITY = (( m_truth_ann_friends_mg_to_go_f_oblivious = { 

EVENTS = { 
1 = ( PRE = friends_m_g AND at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (friends_m_g AND (NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [g] (-friends_m_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(o,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(f,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, m_truth_ann_friends_mg_to_go_f_oblivious),

//lying starts here

CAPABILITY = (( m_lie_ann_at_g_to_fo_oblivious_g = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND -at_g AND BELIEVES [m] (-at_g AND NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [o] (-at_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND at_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, m_lie_ann_at_g_to_fo_oblivious_g),

CAPABILITY = (( m_lie_ann_at_g_to_f_oblivious_go = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND -at_g AND BELIEVES [m] (-at_g AND NOT POSSIBLE [f] (-at_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, m_lie_ann_at_g_to_f_oblivious_go),

CAPABILITY = (( m_lie_ann_at_g_to_o_oblivious_gf = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND -at_g AND BELIEVES [m] (-at_g AND NOT POSSIBLE [o] (-at_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(f,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, m_lie_ann_at_g_to_o_oblivious_gf),

CAPABILITY = (( m_lie_ann_friends_mg_to_fo_oblivious_g = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND -friends_m_g AND BELIEVES [m] (-friends_m_g AND NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [o] (-friends_m_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND friends_m_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, m_lie_ann_friends_mg_to_fo_oblivious_g),

CAPABILITY = (( m_lie_ann_friends_mg_to_f_oblivious_go = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND -friends_m_g AND BELIEVES [m] (-friends_m_g AND NOT POSSIBLE [f] (-friends_m_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND friends_m_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, m_lie_ann_friends_mg_to_f_oblivious_go),

CAPABILITY = (( m_lie_ann_friends_mg_to_o_oblivious_gf = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND -friends_m_g AND BELIEVES [m] (-friends_m_g AND NOT POSSIBLE [o] (-friends_m_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND friends_m_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(f,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, m_lie_ann_friends_mg_to_o_oblivious_gf)

}.

//--adding inferencing actions below--
IACTIONS : {

( infer_th_m = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g) OR (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o)), POST = {th_m} ),
2 = ( PRE = POSSIBLE [m] (TRUE) AND NOT(at_m AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) AND NOT (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g) AND NOT (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o), POST = {-th_m} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_f = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_o AND -friends_o_g, POST = {th_o} ),
2 = ( PRE = POSSIBLE [o] (TRUE) AND NOT(at_o AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_o AND -friends_o_g), POST = {-th_o} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}),

( infer_th_f = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g, POST = {th_f} ),
2 = ( PRE = POSSIBLE [f] (TRUE) AND NOT(at_f AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g), POST = {-th_f} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}})
}.

//GOAL : BELIEVES [m] (-th_m  AND -th_f AND BELIEVES [f] (th_f)).
//GOAL : BELIEVES [m] (-th_m) AND BELIEVES [f] (-th_f) AND BELIEVES [f] (at_g) AND BELIEVES [m] (-at_g).
GOAL : at_m AND -th_m AND BELIEVES [f] (-th_f AND -th_m).
//GOAL : at_m AND -th_m.
//GOAL : BELIEVES [m] (-th_m AND -th_f) AND BELIEVES [f] (-th_m AND -th_f).