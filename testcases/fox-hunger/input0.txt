PROPS : {at_m, at_f, at_o th_m, th_f, th_o, friends_m_f, friends_m_o, friends_f_o, predator_f_m, predator_o_m, hungry_f, hungry_g, hungry_o} .

// replacing alive_i atoms with POSSIBLE [i] (TRUE) statements. 
// __observing agents 
// _agents involved

AGENTS : {m, f, o}.

// initial model description starts here

//uncertainty about mouse being friends with the gruffalo in the initial model
MODEL : 
{ NODES = {
(1,{at_m, -at_f, -at_o, -th_m, -th_f, -th_o, -friends_m_f, -friends_m_o, friends_f_o, predator_f_m, predator_o_m, hungry_f, hungry_g, hungry_o})
},  
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
},
DES = {1}
}.

//action description starts here

ACTIONS : {

CAPABILITY = (( flee_m = { 
EVENTS = { 
1 = ( PRE = (BELIEVES [m] (th_m)) AND at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
},
DES = {1}}), 
m, c20),

CAPABILITY = (( flee_f = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [f] (th_f)) AND at_f AND POSSIBLE [f] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
f, c5),

CAPABILITY = (( flee_o = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [o] (th_o)) AND at_o AND POSSIBLE [o] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
o, c5),


//arrives actions

CAPABILITY = (( m_arrives = { 

EVENTS = { 
1 = ( PRE = -at_m AND POSSIBLE [m] (TRUE), POST = {at_m} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, c25),

// putting all variations

CAPABILITY = (( f_arrives__m_o = { 

EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE) AND at_m AND POSSIBLE [m] (TRUE) AND at_o AND POSSIBLE [o] (TRUE), POST = {at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
f, c3),

CAPABILITY = (( f_arrives__o = { 

EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE), POST = {at_f} ),
2 = ( PRE = (TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,2),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(o,{-(1,1),-(2,2)})
}
,

DES = {1}}), 
f, c3),

CAPABILITY = (( f_arrives__m = { 

EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE) AND at_m AND POSSIBLE [m] (TRUE), POST = {at_f} ),
2 = ( PRE = (TRUE) , POST = {nil} )
},
 
EDGES = {
(o,{-(1,2),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)})
}
,

DES = {1}}), 
f, c3),


// ending all variations

CAPABILITY = (( o_arrives = { 

EVENTS = { 
1 = ( PRE = -at_o AND POSSIBLE [o] (TRUE), POST = {at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
o, c3),


//leaves actions

CAPABILITY = (( m_leaves = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, c25),

CAPABILITY = (( f_leaves = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
f, c5),

CAPABILITY = (( o_leaves = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
o, c5),


//'eats' actions affect alive, will have DEL edges

// putting all variations of eats

CAPABILITY = (( f_eats_m__o = { 

EVENTS = { 
1 = ( PRE = at_m AND at_f AND predator_f_m AND -friends_m_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND POSSIBLE [m] (TRUE) AND hungry_f, POST = {-hungry_f} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
f, c2),

CAPABILITY = (( f_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_f AND predator_f_m AND -friends_m_f AND POSSIBLE [f] (TRUE) AND POSSIBLE [m] (TRUE) AND hungry_f, POST = {-hungry_f} ),
2 = ( PRE = (TRUE) , POST = {nil} )
},
EDGES = {
(m,{-(1,1),-(2,2)}),
(f,{-(1,1),-(2,2)}),
(o,{-(1,2),-(2,2)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
f, c2),



// ending all variations of eats

CAPABILITY = (( o_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_o AND predator_o_m AND -friends_m_o AND POSSIBLE [o] (TRUE) AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
o, c2)
}.

//--adding inferencing actions below--
IACTIONS : {

( infer_th_m = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) OR (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o)), POST = {th_m} ),
2 = ( PRE = POSSIBLE [m] (TRUE) AND NOT(at_m AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) AND NOT (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o), POST = {-th_m} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_o = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_o AND -friends_f_o) OR (at_m AND POSSIBLE [m] (TRUE) AND predator_m_o AND -friends_m_o)), POST = {th_o} ),
2 = ( PRE = POSSIBLE [o] (TRUE) AND NOT(at_o AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_o AND -friends_f_o) AND NOT (at_m AND POSSIBLE [m] (TRUE) AND predator_m_o AND -friends_m_o), POST = {-th_o} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_f = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE) AND ((at_o AND POSSIBLE [o] (TRUE) AND predator_o_f AND -friends_f_o) OR (at_m AND POSSIBLE [m] (TRUE) AND predator_m_f AND -friends_m_f)), POST = {th_f} ),
2 = ( PRE = POSSIBLE [f] (TRUE) AND NOT(at_f AND at_o AND POSSIBLE [o] (TRUE) AND predator_o_f AND -friends_f_o) AND NOT (at_m AND POSSIBLE [m] (TRUE) AND predator_m_f AND -friends_m_f), POST = {-th_f} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}})
}.

//GOAL : BELIEVES [m] (-th_m  AND -th_f AND BELIEVES [f] (th_f)).
//GOAL : BELIEVES [m] (-th_m) AND BELIEVES [f] (-th_f) AND BELIEVES [f] (at_g) AND BELIEVES [m] (-at_g).
//GOAL : at_m AND -th_m AND BELIEVES [f] (-th_f) AND BELIEVES [f] (-th_m).
//GOAL : BELIEVES [m] (-th_m AND -th_f) AND BELIEVES [f] (-th_m AND -th_f).
GOAL : -hungry_f.

PLANNER : {f}.