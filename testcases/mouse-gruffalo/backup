PROPS : {at_m, at_g, at_f, at_o th_m, th_f, th_g, th_o, friends_m_g, friends_f_g, friends_m_f, friends_m_o, friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o, valid, sc_f, sc_o} .

//replacing alive_i atoms with POSSIBLE [i] (TRUE) statements. 

AGENTS : {m, f, o, g}.

// to show that for gruffalo a longer plan is preferred but for gruffalo's child a shorter plan is preferred and flee is not preferred at all


MODEL : 
{ NODES = {
(1,{at_m, at_g, -at_f, -at_o, th_m, -th_f, -th_g, -th_o, -friends_m_g, -friends_f_g, -friends_m_f, -friends_m_o, -friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o, -valid1, -sc_f, -sc_o, -hungry_f, hungry_g, -hungry_o}),
(2,{at_m, at_g, -at_f, -at_o, -th_m, -th_f, -th_g, -th_o, friends_m_g, -friends_f_g, -friends_m_f, -friends_m_o, -friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o, -valid1, -sc_f, -sc_o, -hungry_f, hungry_g, -hungry_o})
},  
EDGES = {
(m,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(f,{-(1,2), -(2,2)}),
(o,{-(1,2), -(2,2)})
},
DES = {1}
}.

//action description starts here

ACTIONS : {

CAPABILITY = (( flee_m = { 
EVENTS = { 
1 = ( PRE = (BELIEVES [m] (th_m)) AND at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
},
DES = {1}}), 
m, c25),

CAPABILITY = (( flee_f = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [f] (th_f)) AND at_f AND POSSIBLE [f] (TRUE), POST = {-at_f,sc_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, c3),

CAPABILITY = (( flee_g = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [g] (th_g)) AND at_g AND POSSIBLE [g] (TRUE), POST = {-at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, c3),

CAPABILITY = (( flee_o = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [o] (th_o)) AND at_o AND POSSIBLE [o] (TRUE), POST = {-at_o, sc_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, c3),

//arrives actions

//CAPABILITY = (( m_arrives = { 

//EVENTS = { 
//1 = ( PRE = -at_m AND POSSIBLE [m] (TRUE), POST = {at_m} )
//},
 
//EDGES = {
//(m,{-(1,1)}),
//(f,{-(1,1)}),
//(o,{-(1,1)}),
//(g,{-(1,1)})
//}
//,

//DES = {1}}), 
//m, m_arrives),

CAPABILITY = (( f_arrives = { 

EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE) AND hungry_f AND -th_f, POST = {at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, c3),

CAPABILITY = (( m_takes_g_to_f = { 

EVENTS = { 
1 = ( PRE = -at_f AND at_g AND at_m AND POSSIBLE [f] (TRUE) AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE), POST = {at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, c3),

CAPABILITY = (( g_arrives = { 

EVENTS = { 
1 = ( PRE = -at_g AND POSSIBLE [g] (TRUE) AND hungry_g AND -th_g, POST = {at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, c3),

CAPABILITY = (( o_arrives = { 

EVENTS = { 
1 = ( PRE = -at_o AND POSSIBLE [o] (TRUE) AND hungry_o AND -th_o, POST = {at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, c3),

CAPABILITY = (( m_takes_g_to_o = { 

EVENTS = { 
1 = ( PRE = -at_o AND at_g AND at_m AND POSSIBLE [o] (TRUE) AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE), POST = {at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, c5),

//leaves actions

//CAPABILITY = (( m_leaves = { 

//EVENTS = { 
//1 = ( PRE = at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
//},
// 
//EDGES = {
//(m,{-(1,1)}),
//(f,{-(1,1)}),
//(o,{-(1,1)}),
//(g,{-(1,1)})
//}
//,
//
//DES = {1}}), 
//m, m_leaves),

CAPABILITY = (( f_leaves = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE) AND NOT (hungry_f), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, c3),

CAPABILITY = (( g_leaves = { 

EVENTS = { 
1 = ( PRE = at_g AND POSSIBLE [g] (TRUE) AND NOT (hungry_g), POST = {-at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, c3),

CAPABILITY = (( o_leaves = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE) AND NOT (hungry_o), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, c3),

//'eats' actions affect alive, will have DEL edges

CAPABILITY = (( g_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_g AND predator_g_m AND -friends_m_g AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE) AND hungry_g, POST = {-at_m})
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
g, c5),

CAPABILITY = (( g_eats_f = { 

EVENTS = { 
1 = ( PRE = at_f AND at_g AND predator_g_f AND -friends_f_g AND POSSIBLE [f] (TRUE) AND POSSIBLE [g] (TRUE) AND hungry_g, POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(f,{-(1,1)})
}
,

DES = {1}}), 
g, c5),

CAPABILITY = (( g_eats_o = { 

EVENTS = { 
1 = ( PRE = at_o AND at_g AND predator_g_o AND -friends_o_g AND POSSIBLE [o] (TRUE) AND POSSIBLE [g] (TRUE) AND hungry_o, POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(o,{-(1,1)})
}
,

DES = {1}}), 
g, c5),


CAPABILITY = (( f_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_f AND predator_f_m AND -friends_m_f AND POSSIBLE [f] (TRUE) AND POSSIBLE [m] (TRUE) AND hungry_f, POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
f, c5),

CAPABILITY = (( o_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_o AND predator_o_m AND -friends_m_o AND POSSIBLE [o] (TRUE) AND POSSIBLE [m] (TRUE) AND hungry_o, POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
o, c5),

//assuming all information related to g is known by g

CAPABILITY = (( m_truth_ann_at_g_to_gfo = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND BELIEVES [m] (at_g AND NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [g] (-at_g) AND NOT POSSIBLE [o] (-at_g) AND (NOT BELIEVES [f] (at_g) AND NOT BELIEVES [g] (at_g) AND NOT BELIEVES [o] (at_g))) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(g,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, c1),

CAPABILITY = (( m_truth_ann_at_g_to_gf_o_oblivious = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (at_g AND (NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [g] (-at_g) AND NOT BELIEVES [f] (at_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(f,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(o,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, c1),

CAPABILITY = (( m_truth_ann_at_g_to_go_f_oblivious = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (at_g AND (NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [g] (-at_g) AND NOT BELIEVES [o] (at_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(o,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(f,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, c1),

CAPABILITY = (( m_truth_ann_friends_mg_to_gfo = { 

EVENTS = { 
1 = ( PRE = friends_m_g AND at_m AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND BELIEVES [m] (friends_m_g AND (NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [g] (-friends_m_g) AND NOT POSSIBLE [o] (-friends_m_g) AND NOT BELIEVES [f] (friends_m_g) AND NOT BELIEVES [o] (friends_m_g)) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(g,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, c1),

CAPABILITY = (( m_truth_ann_friends_mg_to_gf_o_oblivious = { 

EVENTS = { 
1 = ( PRE = friends_m_g AND at_m AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (friends_m_g AND (NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [g] (-friends_m_g) AND NOT BELIEVES [f] (friends_m_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(f,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(o,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, c1),

CAPABILITY = (( m_truth_ann_friends_mg_to_go_f_oblivious = { 

EVENTS = { 
1 = ( PRE = friends_m_g AND at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND BELIEVES [m] (friends_m_g AND (NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [g] (-friends_m_g) AND NOT BELIEVES [o] (friends_m_g)) , POST = {nil} ),
2 = ( PRE =  TRUE , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1), -(2,2)}),
(o,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(f,{-(1,2),-(2,2)})
}
,

DES = {1}}), 
m, c1),

//lying starts here

CAPABILITY = (( m_lie_ann_at_g_to_fo_oblivious_g = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND -at_g AND BELIEVES [m] (-at_g AND NOT POSSIBLE [f] (-at_g) AND NOT POSSIBLE [o] (-at_g) AND NOT BELIEVES [f] (at_g) AND NOT BELIEVES [o] (at_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND at_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, c2),

CAPABILITY = (( m_lie_ann_at_g_to_f_oblivious_go = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND -at_g AND BELIEVES [m] (-at_g AND NOT POSSIBLE [f] (-at_g) AND NOT BELIEVES [f] (at_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, c2),

CAPABILITY = (( m_lie_ann_at_g_to_o_oblivious_gf = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_o AND POSSIBLE [f] (TRUE) AND -at_g AND BELIEVES [m] (-at_g AND NOT POSSIBLE [o] (-at_g) AND NOT BELIEVES [o] (at_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_o AND POSSIBLE [f] (TRUE) AND at_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(f,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, c2),

CAPABILITY = (( m_lie_ann_friends_mg_to_fo_oblivious_g = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND -friends_m_g AND BELIEVES [m] (-friends_m_g AND NOT POSSIBLE [f] (-friends_m_g) AND NOT POSSIBLE [o] (-friends_m_g) AND NOT BELIEVES [o] (friends_m_g) AND NOT BELIEVES [f] (friends_m_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND at_o AND POSSIBLE [o] (TRUE) AND friends_m_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, c2),

CAPABILITY = (( m_lie_ann_friends_mg_to_f_oblivious_go = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND -friends_m_g AND BELIEVES [m] (-friends_m_g AND POSSIBLE [f] (POSSIBLE [g] (TRUE)) AND NOT POSSIBLE [f] (-friends_m_g) AND NOT BELIEVES [f] (friends_m_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_f AND POSSIBLE [f] (TRUE) AND friends_m_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(f,{-(1,2),-(2,2),-(3,3)}),
(o,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, c2),

CAPABILITY = (( m_lie_ann_friends_mg_to_o_oblivious_gf = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_o AND POSSIBLE [f] (TRUE) AND -friends_m_g AND BELIEVES [m] (-friends_m_g AND NOT POSSIBLE [o] (-friends_m_g) AND NOT BELIEVES [o] (friends_m_g)) , POST = {nil} ),  
2 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND at_o AND POSSIBLE [f] (TRUE) AND friends_m_g, POST = {nil} ),
3 = ( PRE = TRUE) , POST = {nil} )
},
 
EDGES = {
(m,{-(1,1),-(2,2),-(3,3)}),
(o,{-(1,2),-(2,2),-(3,3)}),
(f,{-(1,3),-(2,3),-(3,3)}),
(g,{-(1,3),-(2,3),-(3,3)})
}
,

DES = {1}}), 
m, c2),

CAPABILITY = (( m_lie_inf_app_to_g = { 

EVENTS = { 
1 = ( PRE = -at_f AND -at_o AND at_g AND POSSIBLE [g] (TRUE) AND at_m AND POSSIBLE [m] (TRUE) AND delay , POST = {-delay} )
//2 = ( PRE = (TRUE), POST = {nil} )
},
 
EDGES = {
(m,{-(1,1)}),
(g,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)})
}
,

DES = {1}}), 
m, c5)

}.


//--adding inferencing actions below--

IACTIONS : {

( infer_th_m = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g) OR (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o)), POST = {th_m} ),
2 = ( PRE = POSSIBLE [m] (TRUE) AND NOT(at_m AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) AND NOT (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g) AND NOT (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o), POST = {-th_m} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}),

( infer_th_g = { 

EVENTS = { 

1 = ( PRE = -delay, POST = {nil} ),
2 = ( PRE = at_g AND at_m AND sc_f AND sc_o ), POST = {th_g} ),
3 = ( PRE = (NOT (at_m) OR NOT (at_g) OR NOT (sc_f) OR NOT (sc_o)) ), POST = {-th_g} )
//1 = ( PRE = fake AND at_g AND at_m AND th_f AND th_o ), POST = {th_g} ),
//2 = ( PRE = (NOT fake OR (at_m) OR NOT (at_g) OR NOT (th_f) OR NOT (th_o)) ), POST = {-th_g} )
},
EDGES = {
(f,{-(1,1), -(2,2), -(3,3)}),
(m,{-(1,1), -(2,2), -(3,3)}),
(g,{-(1,2), -(1,3), -(2,2), -(2,3), -(3,2), -(3,3)}),
(o,{-(1,1), -(2,2), -(3,3)})
}
,

DES = {1}}), 

( infer_th_f = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g, POST = {th_f} ),
2 = ( PRE = POSSIBLE [f] (TRUE) AND NOT(at_f AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g), POST = {-th_f} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}),

( infer_th_o = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_o AND -friends_o_g, POST = {th_o} ),
2 = ( PRE = POSSIBLE [o] (TRUE) AND NOT(at_o AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_o AND -friends_o_g), POST = {-th_o} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}})
}.

//GOAL : BELIEVES [m] (-th_m  AND -th_f AND BELIEVES [f] (th_f)).
//GOAL : BELIEVES [m] (-th_m) AND BELIEVES [f] (-th_f) AND BELIEVES [f] (at_g) AND BELIEVES [m] (-at_g).
//---GOAL : at_m AND -th_m AND -th_g AND -th_f AND -th_o.
//GOAL : BELIEVES [m] (-th_m AND -th_f) AND BELIEVES [f] (-th_m AND -th_f).
GOAL : BELIEVES [m] (-th_m)

PLANNER : {m} .

last backup: 12 Jun

( infer_th_g = { 

EVENTS = { 
1 = ( PRE = NOT (sc_f AND sc_o), POST = {-th_g} ),
2 = ( PRE = sc_f AND sc_o, POST = {th_g} )
},
EDGES = {
(f,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(o,{-(1,1),-(2,2)}),
(g,{-(1,1),-(2,2)})
}
,

DES = {1,2}}),

another backup:

( infer_th_g = { 

EVENTS = { 
1 = ( PRE = NOT (sc_f AND sc_o), POST = {-th_g} ),
2 = ( PRE = sc_f AND sc_o, POST = {-th_g} ),
3 = ( PRE = sc_f AND sc_o, POST = {th_g} )
},
EDGES = {
(f,{-(1,1),-(1,2), -(2,1),-(2,2),-(3,3)}),
(m,{-(1,1),-(1,2), -(2,1),-(2,2),-(3,3)}),
(o,{-(1,1),-(1,2), -(2,1),-(2,2),-(3,3)}),
(g,{-(1,1),-(2,3),-(3,3)})
}
,

DES = {1,2}}),