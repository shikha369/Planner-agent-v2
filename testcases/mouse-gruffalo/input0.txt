//PROPS : {at_m, at_g, at_f, at_o th_m, th_f, th_g, th_o, friends_m_g, friends_f_g, friends_m_f, friends_m_o, friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o, -valid1, -sc_f, -sc_o} .

//replacing alive_i atoms with POSSIBLE [i] (TRUE) statements. 
// instead of having takes(m,g,f) with m as actor, resuing arrives(f,{m,g}) with m as actor

AGENTS : {m, f, o, g}.


MODEL : 
{ NODES = {
(1,{at_m, -at_f, -at_o, at_g, th_m, -th_f, -th_o, -th_g, -friends_m_f, -friends_m_o, friends_f_o, -friends_m_g, -friends_f_g, -friends_o_g, predator_f_m, predator_o_m, predator_g_m, predator_g_f, predator_g_o, hungry_f, hungry_m, hungry_g, hungry_o, -sc_f, -sc_o})
},  
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
},
DES = {1}
}.

ACTIONS : {

CAPABILITY = (( f_arrives__m_g = { 
EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE)  AND at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE), POST = {at_f}), 
2 = ( PRE = (TRUE) , POST = {nil} ) 
}, 
EDGES = { 
(f,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(o,{-(1,2),-(2,2)}),
(g,{-(1,1),-(2,2)})
},
DES = {1}}), 
m, c3),

CAPABILITY = (( f_flee__m_g = { 
EVENTS = { 
1 = ( PRE = (BELIEVES [f] (th_f)) AND at_f AND POSSIBLE [f] (TRUE)  AND at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE), POST = {-at_f, sc_f}), 
2 = ( PRE = (TRUE) , POST = {nil} ) 
}, 
EDGES = { 
(f,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(g,{-(1,1),-(2,2)}),
(o,{-(1,2),-(2,2)})
},
DES = {1}}), 
f, c5),


CAPABILITY = (( o_arrives__m_g = { 
EVENTS = { 
1 = ( PRE = -at_o AND POSSIBLE [o] (TRUE) AND at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE), POST = {at_o}), 
2 = ( PRE = (TRUE) , POST = {nil} ) 
}, 
EDGES = { 
(o,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(g,{-(1,1),-(2,2)}),
(f,{-(1,2),-(2,2)})
},
DES = {1}}), 
m, c3),

CAPABILITY = (( o_flee__m_g = { 
EVENTS = { 
1 = ( PRE = (BELIEVES [o] (th_o)) AND at_o AND POSSIBLE [o] (TRUE)  AND at_m AND POSSIBLE [m] (TRUE) AND at_g AND POSSIBLE [g] (TRUE), POST = {-at_o, sc_o}), 
2 = ( PRE = (TRUE) , POST = {nil} ) 
}, 
EDGES = { 
(o,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(f,{-(1,2),-(2,2)}),
(g,{-(1,1),-(2,2)})
},
DES = {1}}), 
o, c5),

CAPABILITY = (( g_flee__m = { 
EVENTS = { 
1 = ( PRE = (POSSIBLE [g] (th_g)) AND at_g AND POSSIBLE [g] (TRUE)  AND at_m AND POSSIBLE [m] (TRUE), POST = {-at_g}), 
2 = ( PRE = (TRUE) , POST = {nil} ) 
}, 
EDGES = { 
(g,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(f,{-(1,2),-(2,2)}),
(o,{-(1,2),-(2,2)})
},
DES = {1}}), 
g, c3)
}.


//--adding inferencing actions below--


IACTIONS : {

( infer_th_m = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) OR (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g)), POST = {th_m} ),
2 = ( PRE = NOT (at_m AND POSSIBLE [m] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) OR (at_o AND POSSIBLE [o] (TRUE) AND predator_o_m AND -friends_m_o) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g))), POST = {-th_m} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_o = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_o AND -friends_f_o) OR (at_m AND POSSIBLE [m] (TRUE) AND predator_m_o AND -friends_m_o) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_o AND -friends_o_g)), POST = {th_o} ),
2 = ( PRE = NOT (at_o AND POSSIBLE [o] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_o AND -friends_f_o) OR (at_m AND POSSIBLE [m] (TRUE) AND predator_m_o AND -friends_m_o) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_o AND -friends_o_g))), POST = {-th_o} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_g = { 

EVENTS = { 
1 = ( PRE = NOT (sc_f AND sc_o), POST = {-th_g} ),
2 = ( PRE = sc_f AND sc_o, POST = {th_g} )
},
EDGES = {
(f,{-(1,1),-(2,2)}),
(m,{-(1,1),-(2,2)}),
(o,{-(1,1),-(2,2)}),
(g,{-(1,1),-(2,2)})
}
,

DES = {1,2}}),

( infer_th_f = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE) AND ((at_o AND POSSIBLE [o] (TRUE) AND predator_o_f AND -friends_f_o) OR (at_m AND POSSIBLE [m] (TRUE) AND predator_m_f AND -friends_m_f) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g)), POST = {th_f} ),
2 = ( PRE = NOT (at_f AND POSSIBLE [f] (TRUE) AND ((at_o AND POSSIBLE [o] (TRUE) AND predator_o_f AND -friends_f_o) OR (at_m AND POSSIBLE [m] (TRUE) AND predator_m_f AND -friends_f_m) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g))), POST = {-th_f} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}})

}.

//GOAL : BELIEVES [m] (-th_m  AND -th_f AND BELIEVES [f] (th_f)).
//GOAL : BELIEVES [m] (-th_m) AND BELIEVES [f] (-th_f) AND BELIEVES [f] (at_g) AND BELIEVES [m] (-at_g).
//---GOAL : at_m AND -th_m AND -th_g AND -th_f AND -th_o.
//GOAL : BELIEVES [m] (-th_m AND -th_f) AND BELIEVES [f] (-th_m AND -th_f).
GOAL : BELIEVES [m] (-th_m).

PLANNER : {m} .