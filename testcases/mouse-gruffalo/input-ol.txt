PROPS : {at_m, at_g, at_f, at_o th_m, th_f, th_g, th_o, friends_m_g, friends_f_g, friends_m_f, friends_m_o, friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o} .

//replacing alive_i atoms with POSSIBLE [i] (TRUE) statements. 

AGENTS : {m, f, o, g}.

// initial model description starts here
// g is added for m and it inherits mâ€™s beliefs. thm is inferred. g and m share the same possible world whereas 
// f and o believe that thf, tho, friends_m_g but not not thm

MODEL : 
{ NODES = {
(1,{at_m, at_g, -at_f, -at_o, th_m, -th_f, -th_g, -th_o, -friends_m_g, -friends_f_g, -friends_m_f, -friends_m_o, -friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o}),
(2,{at_m, at_g, -at_f, -at_o, -th_m, -th_f, -th_g, -th_o, friends_m_g, -friends_f_g, -friends_m_f, -friends_m_o, -friends_o_g, predator_g_m, predator_g_f, predator_f_m, predator_o_m, predator_g_o})
},  
EDGES = {
(m,{-(1,1), -(2,2)}),
(g,{-(1,1), -(2,2)}),
(f,{-(1,2), -(2,2)}),
(o,{-(1,2), -(2,2)})
},
DES = {1}
}.

//action description starts here

ACTIONS : {

CAPABILITY = (( flee_m = { 
EVENTS = { 
1 = ( PRE = (BELIEVES [m] (th_m)) AND at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
},
DES = {1}}), 
m, m_runs_away),

CAPABILITY = (( flee_f = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [f] (th_f)) AND at_f AND POSSIBLE [f] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, f_runs_away),

CAPABILITY = (( flee_g = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [g] (th_g)) AND at_g AND POSSIBLE [g] (TRUE), POST = {-at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, g_runs_away),

CAPABILITY = (( flee_o = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [o] (th_o)) AND at_o AND POSSIBLE [o] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, o_runs_away),

CAPABILITY = (( flee_g = { 

EVENTS = { 
1 = ( PRE = (BELIEVES [g] (th_g)) AND at_g AND POSSIBLE [g] (TRUE), POST = {-at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, g_runs_away),


//arrives actions

CAPABILITY = (( m_arrives = { 

EVENTS = { 
1 = ( PRE = -at_m AND POSSIBLE [m] (TRUE), POST = {at_m} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
m, m_arrives),

CAPABILITY = (( f_arrives = { 

EVENTS = { 
1 = ( PRE = -at_f AND POSSIBLE [f] (TRUE), POST = {at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, f_arrives),

CAPABILITY = (( g_arrives = { 

EVENTS = { 
1 = ( PRE = -at_g AND POSSIBLE [g] (TRUE), POST = {at_g} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
g, g_arrives),

CAPABILITY = (( o_arrives = { 

EVENTS = { 
1 = ( PRE = -at_o AND POSSIBLE [o] (TRUE), POST = {at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, o_arrives),


//leaves actions

CAPABILITY = (( m_leaves = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
m, m_leaves),

CAPABILITY = (( f_leaves = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
f, f_leaves),

//CAPABILITY = (( g_leaves = { 
//
//EVENTS = { 
//1 = ( PRE = at_g AND POSSIBLE [g] (TRUE), POST = {-at_g} )
//},
// 
//EDGES = {
//(m,{-(1,1)}),
//(f,{-(1,1)}),
//(o,{-(1,1)}),
//(g,{-(1,1)})
//}
//,
//
//DES = {1}}), 
//g, g_leaves),

CAPABILITY = (( o_leaves = { 

EVENTS = { 
1 = ( PRE = at_o AND POSSIBLE [o] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}
,

DES = {1}}), 
o, o_leaves),


//'eats' actions affect alive, will have DEL edges

CAPABILITY = (( g_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_g AND predator_g_m AND -friends_m_g AND POSSIBLE [m] (TRUE) AND POSSIBLE [g] (TRUE), POST = {-at_m})
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
g, g_eats_m),

CAPABILITY = (( g_eats_f = { 

EVENTS = { 
1 = ( PRE = at_f AND at_g AND predator_g_f AND -friends_f_g AND POSSIBLE [f] (TRUE) AND POSSIBLE [g] (TRUE), POST = {-at_f} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(f,{-(1,1)})
}
,

DES = {1}}), 
g, g_eats_f),

CAPABILITY = (( g_eats_o = { 

EVENTS = { 
1 = ( PRE = at_o AND at_g AND predator_g_o AND -friends_o_g AND POSSIBLE [o] (TRUE) AND POSSIBLE [g] (TRUE), POST = {-at_o} )
},
 
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(o,{-(1,1)})
}
,

DES = {1}}), 
g, g_eats_o),


CAPABILITY = (( f_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_f AND predator_f_m AND -friends_m_f AND POSSIBLE [f] (TRUE) AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
f, f_eats_m),

CAPABILITY = (( o_eats_m = { 

EVENTS = { 
1 = ( PRE = at_m AND at_o AND predator_o_m AND -friends_m_o AND POSSIBLE [o] (TRUE) AND POSSIBLE [m] (TRUE), POST = {-at_m} )
},
EDGES = {
(m,{-(1,1)}),
(f,{-(1,1)}),
(o,{-(1,1)}),
(g,{-(1,1)})
}

DELEDGES = {
(m,{-(1,1)})
}
,

DES = {1}}), 
o, o_eats_m)
}.

//--adding inferencing actions below--
IACTIONS : {

( infer_th_m = { 

EVENTS = { 
1 = ( PRE = at_m AND POSSIBLE [m] (TRUE) AND ((at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) OR (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g)), POST = {th_m} ),
2 = ( PRE = POSSIBLE [m] (TRUE) AND NOT(at_m AND at_f AND POSSIBLE [f] (TRUE) AND predator_f_m AND -friends_m_f) AND NOT (at_g AND POSSIBLE [g] (TRUE) AND predator_g_m AND -friends_m_g), POST = {-th_m} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_g = { 

EVENTS = { 
1 = ( PRE = at_g AND at_m AND th_f AND th_o ), POST = {th_g} ),
2 = ( PRE = NOT (at_m) OR NOT (at_g) OR NOT (th_f) OR NOT (th_o) ), POST = {-th_g} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}}), 

( infer_th_f = { 

EVENTS = { 
1 = ( PRE = at_f AND POSSIBLE [f] (TRUE) AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g, POST = {th_f} ),
2 = ( PRE = POSSIBLE [f] (TRUE) AND NOT(at_f AND at_g AND POSSIBLE [g] (TRUE) AND predator_g_f AND -friends_f_g), POST = {-th_f} )
},
EDGES = {
(f,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(m,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(g,{-(1,1), -(1,2), -(2,1), -(2,2)}),
(o,{-(1,1), -(1,2), -(2,1), -(2,2)})
}
,

DES = {1,2}})
}.

//GOAL : BELIEVES [m] (-th_m  AND -th_f AND BELIEVES [f] (th_f)).
//GOAL : BELIEVES [m] (-th_m) AND BELIEVES [f] (-th_f) AND BELIEVES [f] (at_g) AND BELIEVES [m] (-at_g).
GOAL : at_m AND -th_m AND -th_o AND -th_f AND -th_g.
//GOAL : BELIEVES [m] (-th_m AND -th_f) AND BELIEVES [f] (-th_m AND -th_f).